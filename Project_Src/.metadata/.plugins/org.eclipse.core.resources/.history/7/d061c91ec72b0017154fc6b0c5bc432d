/*
 ============================================================================
 Name        : 4digitcount.c
 Author      : Kiran
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include<stdint.h>
#include <string.h>
#include <unistd.h>
#include <sys/poll.h>
#include <sys/types.h>
#include <sys/stat.h>


#define SYS_GPIO_PATH "/sys/class/gpio"
#define SYSFS_GPIO_DIR "/sys/class/gpio"
#define POLL_TIMEOUT (3 * 1000) /* 3 seconds */
#define MAX_BUF 120

uint8_t numbers[10]={0x77,0x06,0xB3,0x97,0xc6,0xD5,0xf5,0x07,0xf7,0XD7};

/* This is the array of file descriptors for each segment of the display */
FILE *sysgpio[8];


int initialize_all_gpios(void)
{
	char *str="out";
	/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[0] = fopen("/sys/class/gpio/gpio66/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[0] != 0)
	{

		fprintf(sysgpio[0],"%s",str);
		fclose(sysgpio[0]);
		sysgpio[0] = fopen("/sys/class/gpio/gpio66/value", "w+" );
		fprintf(sysgpio[0],"%d",0);
		fflush(sysgpio[0]);
	}
	else
	{
		return -1;
	}


/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[1] = fopen("/sys/class/gpio/gpio67/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[1] != 0)
	{
		fprintf(sysgpio[1],"%s","out");
		fclose(sysgpio[1]);
		sysgpio[1] = fopen("/sys/class/gpio/gpio67/value", "w+" );
		fprintf(sysgpio[1],"%d",0);
		fflush(sysgpio[1]);
	}
	else
	{
		return -1;
	}

/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[2] = fopen("/sys/class/gpio/gpio69/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[2] != 0)
	{
		fprintf(sysgpio[2],"%s","out");
		fclose(sysgpio[2]);
		sysgpio[2] = fopen("/sys/class/gpio/gpio69/value", "w+" );
		fprintf(sysgpio[2],"%d",0);
		fflush(sysgpio[2]);

	}
	else
	{
		return -1;
	}



/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[3] = fopen("/sys/class/gpio/gpio68/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[3] != 0)
	{
		fprintf(sysgpio[3],"%s","out");
		fclose(sysgpio[3]);
		sysgpio[3] = fopen("/sys/class/gpio/gpio68/value", "w+" );
		fprintf(sysgpio[3],"%d",0);
		fflush(sysgpio[3]);
	}
	else
	{
		return -1;
	}

/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[4] = fopen("/sys/class/gpio/gpio45/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[4] != 0)
	{
		fprintf(sysgpio[4],"%s","out");
		fclose(sysgpio[4]);
		sysgpio[4] = fopen("/sys/class/gpio/gpio45/value", "w+" );
		fprintf(sysgpio[4],"%d",0);
		fflush(sysgpio[4]);
	}
	else
	{
		return -1;
	}


/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[5] = fopen("/sys/class/gpio/gpio44/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[5] != 0)
	{
		fprintf(sysgpio[5],"%s","out");
		fclose(sysgpio[5]);
		sysgpio[5] = fopen("/sys/class/gpio/gpio44/value", "w+" );
		fprintf(sysgpio[5],"%d",0);
		fflush(sysgpio[5]);
	}
	else
	{
		return -1;
	}


/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[6] = fopen("/sys/class/gpio/gpio26/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[6] != 0)
	{
		fprintf(sysgpio[6],"%s","out");
		fclose(sysgpio[6]);
		sysgpio[6] = fopen("/sys/class/gpio/gpio26/value", "w+" );
		fprintf(sysgpio[6],"%d",0);
		fflush(sysgpio[6]);
	}
	else
	{
		return -1;
	}


/* first init the direction as out */
	/* open the file in both read and write mode */
	sysgpio[7] = fopen("/sys/class/gpio/gpio46/direction", "w+" );
	/* fopen returns 0, the NULL pointer, on failure */
	if(sysgpio[7] != 0)
	{
		fprintf(sysgpio[7],"%s","out");
		fclose(sysgpio[7]);
		sysgpio[7] = fopen("/sys/class/gpio/gpio46/value", "w+" );
		fprintf(sysgpio[7],"%d",0);
		fflush(sysgpio[7]);
	}
	else
	{
		return -1;
	}




return 0;

}

void Write_number(uint8_t value)
{

	int i=0,value1;


	for (i=0;i< 8;i++)
	{
		value1 =  ( value & ( 1 << i) );
		value1 = value1 >> i;
		fprintf(sysgpio[i],"%d", value1 );
		fflush(sysgpio[i]);
	}

}

void displayNumber(int toDisplay) {
#define DISPLAY_BRIGHTNESS  500

#define DIGIT_ON  HIGH
#define DIGIT_OFF  LOW

  long beginTime = millis();

  for(int digit = 4 ; digit > 0 ; digit--) {

    //Turn on a digit for a short amount of time
    switch(digit) {
    case 1:
      digitalWrite(digit1, DIGIT_ON);
      break;
    case 2:
      digitalWrite(digit2, DIGIT_ON);
      break;
    case 3:
      digitalWrite(digit3, DIGIT_ON);
      break;
    case 4:
      digitalWrite(digit4, DIGIT_ON);
      break;
    }

    //Turn on the right segments for this digit
    lightNumber(toDisplay % 10);
    toDisplay /= 10;

  delayMicroseconds(DISPLAY_BRIGHTNESS);
    //Display digit for fraction of a second (1us to 5000us, 500 is pretty good)

    //Turn off all segments
    lightNumber(10);

    //Turn off all digits
    digitalWrite(digit1, DIGIT_OFF);
    digitalWrite(digit2, DIGIT_OFF);
    digitalWrite(digit3, DIGIT_OFF);
    digitalWrite(digit4, DIGIT_OFF);
  }

  // while( (millis() - beginTime) < 10) ;
  //Wait for 20ms to pass before we paint the display again
}

int main(void) {
	printf("upcounting/downcounting/random counting on 4digit 7 segment display\n");
}



